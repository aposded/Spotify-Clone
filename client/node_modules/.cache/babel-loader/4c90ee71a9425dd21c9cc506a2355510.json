{"ast":null,"code":"var _jsxFileName = \"/Users/apostolosdedeloudis/Documents/GitHub/Spotify-Clone/client/src/Dashboard.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { Container, Form } from 'react-bootstrap';\nimport useAuth from './useAuth';\nimport SpotifyWebApi from 'spotify-web-api-node';\nimport TrackSearchResult from './TrackSearchResult';\nimport Player from './Player';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SpotifyApi = new SpotifyWebApi({\n  clientId: '250a9153ab334c6cba6723476cf799eb'\n});\nexport default function Dashboard({\n  code\n}) {\n  _s();\n\n  if (localStorage.getItem('accessToken') == null) {\n    const accessToken = useAuth(code);\n  } else {\n    const accessToken = localStorage.getItem('accessToken');\n  }\n\n  localStorage.setItem('accessToken', accessToken);\n  const [search, setSearch] = useState('');\n  const [searchResults, setSearchResults] = useState([]);\n  const [playingTrack, setPlayingTrack] = useState({});\n\n  function chooseTrack(track) {\n    setPlayingTrack(track);\n    setSearchResults('');\n  }\n\n  useEffect(() => {\n    if (!accessToken) return;\n    SpotifyApi.setAccessToken(accessToken);\n  }, [accessToken]);\n  console.log(searchResults);\n  useEffect(() => {\n    if (!search) return setSearchResults([]);\n    if (!accessToken) return;\n    let cancel = false;\n    SpotifyApi.searchTracks(search).then(res => {\n      if (cancel) return;\n      console.log(res.body);\n      setSearchResults(res.body.tracks.items.map(track => {\n        const smallestAlbumImage = track.album.images.reduce((smallest, image) => {\n          if (image.height < smallest.height) return image;\n          return smallest;\n        }, track.album.images[0]);\n        return {\n          artist: track.artists[0].name,\n          title: track.name,\n          uri: track.uri,\n          albumURL: smallestAlbumImage.url\n        };\n      }));\n    });\n    return () => cancel = true;\n  }, [search, accessToken]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"d-flex flex-column py-2\",\n    style: {\n      height: '100vh'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n      type: \"search\",\n      placeholder: \"Search Songs/Artists\",\n      value: search,\n      onChange: e => {\n        setSearch(e.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-grow-1 my-2\",\n      style: {\n        overflowY: 'auto'\n      },\n      children: searchResults.map(track => /*#__PURE__*/_jsxDEV(TrackSearchResult, {\n        track: track,\n        chooseTrack: chooseTrack\n      }, track.uri, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Player, {\n        accessToken: accessToken,\n        trackUri: playingTrack.uri\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 22\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 13\n  }, this);\n}\n\n_s(Dashboard, \"zE8L6MLZjycVMQ4iB32rezEZEBk=\", false, function () {\n  return [useAuth];\n});\n\n_c = Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["/Users/apostolosdedeloudis/Documents/GitHub/Spotify-Clone/client/src/Dashboard.jsx"],"names":["useState","useEffect","Container","Form","useAuth","SpotifyWebApi","TrackSearchResult","Player","SpotifyApi","clientId","Dashboard","code","localStorage","getItem","accessToken","setItem","search","setSearch","searchResults","setSearchResults","playingTrack","setPlayingTrack","chooseTrack","track","setAccessToken","console","log","cancel","searchTracks","then","res","body","tracks","items","map","smallestAlbumImage","album","images","reduce","smallest","image","height","artist","artists","name","title","uri","albumURL","url","e","target","value","overflowY"],"mappings":"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","sourcesContent":["import {useState, useEffect} from 'react'\nimport {Container, Form} from 'react-bootstrap';\nimport useAuth from './useAuth';\nimport SpotifyWebApi from 'spotify-web-api-node'\nimport TrackSearchResult from './TrackSearchResult'\nimport Player from './Player';\n\nconst SpotifyApi = new SpotifyWebApi({\n    clientId: '250a9153ab334c6cba6723476cf799eb'\n})\n\nexport default function Dashboard({ code }) {\n\n    if (localStorage.getItem('accessToken') == null) {\n        const accessToken = useAuth(code) \n    } else {\n        const accessToken = localStorage.getItem('accessToken')\n    }\n    localStorage.setItem('accessToken', accessToken)\n    const [search, setSearch] = useState('')\n    const [searchResults, setSearchResults] = useState([])\n    const [playingTrack, setPlayingTrack] = useState({})\n    \n    function chooseTrack(track) {\n        setPlayingTrack(track)\n        setSearchResults('')\n    }\n    \n    useEffect(() => {\n        if (!accessToken) return\n        SpotifyApi.setAccessToken(accessToken)\n    }, [accessToken])\n    \n    console.log(searchResults)\n    \n    useEffect(() => {\n        if (!search) return setSearchResults([])\n        if (!accessToken) return \n        \n        let cancel = false\n        \n        SpotifyApi.searchTracks(search).then(res => {\n            if (cancel) return \n            console.log(res.body)\n            setSearchResults(res.body.tracks.items.map(track => {\n                const smallestAlbumImage = track.album.images.reduce((smallest, image) => {\n                    if (image.height < smallest.height) return image\n                    return smallest\n                }, track.album.images[0])\n                return{\n                    artist: track.artists[0].name,\n                    title: track.name,\n                    uri: track.uri,\n                    albumURL: smallestAlbumImage.url\n                    \n                }\n            })\n        )})\n        return () => cancel = true\n    }, [search, accessToken])\n    \n    return (\n            <Container className='d-flex flex-column py-2' style={{height: '100vh'}}>\n                <Form.Control type='search' placeholder='Search Songs/Artists' value={search} onChange={e => {setSearch(e.target.value)}} />\n                <div className='flex-grow-1 my-2' style={{overflowY: 'auto'}}>\n                     {searchResults.map(track => (\n                        <TrackSearchResult\n                            track={track}\n                            key={track.uri}\n                            chooseTrack={chooseTrack}\n                        />\n                     ))}\n                </div>\n                <div><Player accessToken={accessToken} trackUri={playingTrack.uri} /></div>\n            </Container>\n    )\n}"]},"metadata":{},"sourceType":"module"}