{"ast":null,"code":"import _slicedToArray from\"/Users/apostolosdedeloudis/Documents/GitHub/Spotify-Clone/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from'react';import SpotifyWebPlayer from'react-spotify-web-playback';import{jsx as _jsx}from\"react/jsx-runtime\";export default function Player(_ref){var accessToken=_ref.accessToken,trackUri=_ref.trackUri;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),play=_useState2[0],setPlay=_useState2[1];useEffect(function(){trackUri?setPlay(true):null;},[trackUri]);if(!accessToken)return null;return/*#__PURE__*/_jsx(SpotifyWebPlayer,{token:accessToken,callback:function callback(state){if(!state.isPlaying){setPlay(false);}},showSaveIcon:true,play:play,uris:trackUri?[trackUri]:[]});}","map":{"version":3,"sources":["/Users/apostolosdedeloudis/Documents/GitHub/Spotify-Clone/client/src/Player.jsx"],"names":["React","useEffect","useState","SpotifyWebPlayer","Player","accessToken","trackUri","play","setPlay","state","isPlaying"],"mappings":"uLAAA,MAAOA,CAAAA,KAAP,EAAeC,SAAf,CAA0BC,QAA1B,KAAyC,OAAzC,CACA,MAAOC,CAAAA,gBAAP,KAA6B,4BAA7B,C,2CAEA,cAAe,SAASC,CAAAA,MAAT,MAAyC,IAAxBC,CAAAA,WAAwB,MAAxBA,WAAwB,CAAXC,QAAW,MAAXA,QAAW,eAC5BJ,QAAQ,CAAC,KAAD,CADoB,wCAC7CK,IAD6C,eACvCC,OADuC,eAGpDP,SAAS,CAAC,UAAM,CACZK,QAAQ,CAAGE,OAAO,CAAC,IAAD,CAAV,CAAmB,IAA3B,CACH,CAFQ,CAEN,CAACF,QAAD,CAFM,CAAT,CAIA,GAAI,CAACD,WAAL,CAAkB,MAAO,KAAP,CAClB,mBAAO,KAAC,gBAAD,EAAkB,KAAK,CAAEA,WAAzB,CAAsC,QAAQ,CAAI,kBAAAI,KAAK,CAAI,CAAC,GAAI,CAACA,KAAK,CAACC,SAAX,CAAsB,CAACF,OAAO,CAAC,KAAD,CAAP,CAAe,CAAC,CAAnG,CAAqG,YAAY,KAAjH,CAAkH,IAAI,CAAED,IAAxH,CAA8H,IAAI,CAAED,QAAQ,CAAG,CAACA,QAAD,CAAH,CAAgB,EAA5J,EAAP,CACH","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport SpotifyWebPlayer from 'react-spotify-web-playback'\n\nexport default function Player({accessToken, trackUri}) {\n    const [play, setPlay] = useState(false)\n    \n    useEffect(() => {\n        trackUri ? setPlay(true) : null\n    }, [trackUri])\n    \n    if (!accessToken) return null\n    return <SpotifyWebPlayer token={accessToken} callback = {state => {if (!state.isPlaying) {setPlay(false)}}} showSaveIcon play={play} uris={trackUri ? [trackUri] : []} />\n}"]},"metadata":{},"sourceType":"module"}